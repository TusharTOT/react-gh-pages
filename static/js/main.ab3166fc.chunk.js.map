{"version":3,"sources":["Components/PureComponent.js","Components/Button.js","App.js","Components/LifeCycle.js","Components/ErrorBoundary.js","reportWebVitals.js","index.js"],"names":["PureComponent","props","count","Button","state","isChnaged","className","onClick","this","clicked","title","count23","React","Component","App","handleChange","handleClick","setState","console","log","handleClickDec","prevProps","prevState","ErrorBoundary","hasError","error","errorInfo","warn","children","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oNAwBeA,EAtBO,SAACC,GAanB,OACI,8BACI,0CACaA,EAAMC,YCkChBC,E,kDAjCX,WAAYF,GAAQ,IAAD,8BACf,cAAMA,IACDG,MAAQ,CACTF,MAAO,EACPG,WAAW,GAJA,E,0CAmBnB,WACI,OACI,gCACI,8BACI,wBAAQC,UAAU,kBAAkBC,QAASC,KAAKP,MAAMQ,QAAxD,SAAkED,KAAKP,MAAMS,UAG7EF,KAAKJ,MAAMC,UAAY,uCAAiB,W,uCAlBxD,SAAgCJ,EAAOG,GAEnC,OAAIH,EAAMU,UAAYP,EAAMF,MACjB,CACHG,WAAW,GAIZ,S,GAjBMO,IAAMC,WCkEZC,GClFSD,Y,kDDKtB,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IAkBRc,aAAe,aAnBI,EAuBnBC,YAAc,WACZ,EAAKC,SAAS,CAAEf,MAAO,EAAKE,MAAMF,MAAQ,IACxC,WACEgB,QAAQC,UA1BK,EA8BnBC,eAAiB,WACf,EAAKH,SAAS,CAAEf,MAAO,EAAKE,MAAMF,MAAQ,KA7B1C,EAAKE,MAAQ,CACXF,MAAO,GAHQ,E,sDAWnB,SAAmBmB,EAAWC,GAGxBA,EAAUpB,MAAUM,KAAKJ,MAAMF,Q,+BAoBrC,c,oBAkBA,WAAU,IAAD,OACCA,EAAUM,KAAKJ,MAAfF,MACR,OACE,sBAAKI,UAAU,wBAAf,UACE,qBAAKA,UAAU,MAAf,SACE,cAAC,EAAD,CAAQI,MAAO,YAAaD,QAAS,kBAAM,EAAKO,eAAeL,QAASH,KAAKJ,MAAMF,UAErF,wBAAQK,QAASC,KAAKO,aAAtB,0BAQA,gCACE,cAAC,EAAD,CAAQL,MAAO,YAAaD,QAAS,kBAAM,EAAKW,oBAChD,cAAC,EAAD,CAAelB,MAAOA,c,GAvEdW,cEHGU,E,kDACjB,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IACDG,MAAQ,CAAEoB,UAAU,GAFV,E,qDAUnB,SAAkBC,EAAOC,GAErBR,QAAQS,KAAKF,EAAOC,K,oBAGxB,WACI,OAAIlB,KAAKJ,MAAMoB,SAEJ,uDAGJhB,KAAKP,MAAM2B,Y,uCAhBtB,SAAgCH,GAE5B,MAAO,CAAED,UAAU,O,GARgBZ,IAAMC,WCUlCgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,EAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ab3166fc.chunk.js","sourcesContent":["import React from 'react';\n\nconst PureComponent = (props) => {\n\n\n\n\n    // componentDidUpdate = (prevProps) => {\n    //     // Typical usage (don't forget to compare props):\n    //     if (this.props.count !== prevProps.count) {\n    //         this.fetchData(this.props.userID);\n    //     }\n    // }\n\n\n    return (\n        <div>\n            <h4>\n                Title:  {props.count}\n            </h4>\n        </div>\n    );\n};\n\nexport default PureComponent;","import React from 'react';\n\n// const Button = (props) => {\n//     console.log(props);\n//     const { clicked, title, count23 } = props;\n\n//     return (\n{/* <div>\n    <button className=\"btn btn-primary\" onClick={clicked}>{title}</button>\n</div> */}\n//     );\n// };\n\n\n// export default Button;\n\n// import React, { Component } from 'react';\n\nclass Button extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 1,\n            isChnaged: true,\n        }\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        debugger\n        if (props.count23 !== state.count) {\n            return {\n                isChnaged: false\n            };\n        }\n\n        return null;\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <button className=\"btn btn-primary\" onClick={this.props.clicked}>{this.props.title}</button>\n                </div>\n                {\n                    this.state.isChnaged ? <h1>HEllo</h1> : null\n                }\n            </div>\n        );\n    }\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport PureComponent from './Components/PureComponent';\nimport Button from './Components/Button';\nimport LifeCycle from './Components/LifeCycle';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      // items: [],\n    }\n  }\n\n\n\n\n  componentDidUpdate(prevProps, prevState) {\n    debugger\n    // Typical usage (don't forget to compare props):\n    if (prevState.count !== this.state.count) {\n      // api call\n    }\n  }\n\n  handleChange = () => {\n    debugger\n  }\n\n  handleClick = () => {\n    this.setState({ count: this.state.count + 1 },\n      () => {\n        console.log();\n      })\n  }\n\n  handleClickDec = () => {\n    this.setState({ count: this.state.count - 1 })\n  }\n\n  componentDidMount() {\n    // fetch(\"https://jsonplaceholder.typicode.com/posts\")\n    //   .then(res => res.json())\n    //   .then(\n    //     (result) => {\n    //       this.setState({\n    //         items: result\n    //       });\n    //     },\n    //     // Note: it's important to handle errors here\n    //     // instead of a catch() block so that we don't swallow\n    //     // exceptions from actual bugs in components.\n    //     (error) => {\n\n    //     }\n    //   )\n  }\n\n  render() {\n    const { count } = this.state;\n    return (\n      <div className=\"text-center jumbotron\">\n        <div className=\"m-2\">\n          <Button title={'Increment'} clicked={() => this.handleClick()} count23={this.state.count} />\n        </div>\n        <button onClick={this.handleChange}>HandleChange</button>\n        {/* <ul>\n          {\n            this.state.items.map(item => {\n              return <li>{item.title}</li>\n            })\n          }\n        </ul> */}\n        <div>\n          <Button title={'Decrement'} clicked={() => this.handleClickDec()} />\n          <PureComponent count={count} />\n          {/* <TestComponent /> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from 'react'\n\nclass LifeCycle extends Component {\n    componentDidMount() {\n        console.log('Component DID MOUNT!')\n    }\n    componentWillReceiveProps(newProps) {\n        debugger\n        console.log('Component WILL RECIEVE PROPS!')\n    }\n    shouldComponentUpdate(newProps, newState) {\n        debugger\n        return true;\n    }\n    componentWillUpdate(nextProps, nextState) {\n        debugger\n        if (this.props.myNumber === 5) {\n            throw new Error('I crashed!');\n        }\n        console.log('Component WILL UPDATE!');\n    }\n    componentDidUpdate(prevProps, prevState) {\n        debugger\n        console.log('Component DID UPDATE!')\n    }\n    componentWillUnmount() {\n        console.log('Component WILL UNMOUNT!')\n    }\n    render() {\n        return (\n            <div>\n                <h3>{this.props.myNumber}</h3>\n            </div>\n        );\n    }\n}\n\nexport default LifeCycle;\n","import React from 'react'\n\nexport default class ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        // You can also log the error to an error reporting service\n        console.warn(error, errorInfo);\n    }\n\n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return <h1>Something went wrong.</h1>;\n        }\n\n        return this.props.children;\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport ErrorBoundary from './Components/ErrorBoundary'\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <ErrorBoundary>\n    <App />\n  </ErrorBoundary>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}